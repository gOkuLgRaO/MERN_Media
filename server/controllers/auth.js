import bcrypt from "bcrypt"; // for encryption of password
import jwt from "jsonwebtoken"; // sends webtoken for authorization
import User from "../models/User.js"; // User is a table. The table is created in User in models folder

/* REGISTER USER */

export const register = async (req, res) => { // register function is created. async becz we are calling the mongo db 
    try {
      const { // column names of User table are declared as constants becz we need input for these constants
        firstName,
        lastName,
        email,
        password,
        picturePath,
        friends,
        location,
        occupation,
      } = req.body; // this is the request body
  
      const salt = await bcrypt.genSalt(); // salt is generated by bcrypt which is used to encrypt password
      const passwordHash = await bcrypt.hash(password, salt);
  
      const newUser = new User({ // when a new user signs up
        firstName,
        lastName,
        email,
        password: passwordHash, // encrypted password is created
        picturePath,
        friends,
        location,
        occupation,
        viewedProfile: Math.floor(Math.random() * 10000),
        impressions: Math.floor(Math.random() * 10000),
      });
      const savedUser = await newUser.save(); // details of new user is saved
      res.status(201).json(savedUser); // status 201 means something is created successfully
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  };
  
  /* LOGGING IN */
  export const login = async (req, res) => {
    try {
      const { email, password } = req.body; // email and password is required to authenticate login
      const user = await User.findOne({ email: email }); // grab user email and check
      if (!user) return res.status(400).json({ msg: "User does not exist. " });
  
      const isMatch = await bcrypt.compare(password, user.password); // if email matches, check password
      if (!isMatch) return res.status(400).json({ msg: "Invalid credentials. " });
  
      const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET); // go to env file to check for jwt secret
      delete user.password;
      res.status(200).json({ token, user });
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  };

  // go to routes/auth.js to create route for login. becz as the user already exits, we have to import data from db


  